#!/usr/bin/env python3

import matplotlib.pyplot as plt

sequences = dict()


def get_collatz_memo(k):
    sequence = []

    while k != 1:

        # We already have the sequence for k
        if k in sequences:
            # We add all the new sequences generated by this run
            for i in range(len(sequence)):
                sequences[sequence[i]] = sequence[i:] + sequences[k]
            # we return the final sequence
            return sequence + sequences[k]

        # We aplpy the rules as before
        sequence.append(k)
        if k % 2 == 0:
            k //= 2
        else:
            k = k * 3 + 1

    sequence.append(k)

    # When we are done we add all the newly calculated sequences
    # to our cache
    for i in range(len(sequence)):
        # if we reach a sequence that is allreay in the cache we can stop
        if sequence[i] in sequences:
            break
        sequences[sequence[i]] = sequence[i:]

    return sequence


def plotMaxes(lim, filename, cmap, ymax=100_000):
    x, y, c = [], [], []
    plt.figure(figsize=(20, 20))
    for i in range(1, lim + 1):
        x.append(i)
        y.append(max(sequences[i]))
        c.append((i - 1) / lim)

    plt.scatter(x, y, c=cmap(c), edgecolors="white", linewidth=1, alpha=0.7)
    plt.xlabel("Starting Number")
    plt.ylabel("Maximum number reached in sequence")
    plt.ylim((0, ymax))
    plt.savefig(filename)


def plotPathLengths(lim, filename, cmap):
    x, y, c = [], [], []
    fig = plt.figure(figsize=(20, 20))
    for i in range(1, lim + 1):
        x.append(i)
        y.append(len(sequences[i]))
        c.append((i - 1) / lim)

    plt.scatter(x, y, c=cmap(c), edgecolors="white", linewidth=1, alpha=0.7)
    plt.xlabel("Starting Number")
    plt.ylabel("Length of sequence")
    plt.savefig(filename)


def plotPaths(lim, filename, cmap=None, log=False, reverse=False):
    fig = plt.figure(figsize=(20, 20))
    for i in range(1, lim + 1):
        x = sequences[i][::-1] if reverse else sequences[i]
        c = cmap((i - 1) / lim) if cmap is not None else "#1f77b4"
        plt.plot(x, c=c)
    plt.tick_params(axis="x", which="both", bottom=False, top=False, labelbottom=False)
    if log:
        plt.yscale("log")
        plt.xscale("log")
    plt.savefig(filename)


def plotPath(val, filename):
    fig = plt.figure(figsize=(20, 20))
    plt.plot(sequences[val], marker="o")
    plt.tick_params(axis="x", which="both", bottom=False, top=False, labelbottom=False)
    plt.savefig(filename)


if __name__ == "__main__":

    # Now we can actually use memoization
    for k in range(1, 10000):
        sequences[k] = get_collatz_memo(k)

    cmap = plt.get_cmap("viridis")

    plotPath(10, "path_10.svg")
    plotPath(27, "path_27.svg")

    plotPaths(20, "paths_20.svg", cmap)
    plotPaths(30, "paths_30.svg", cmap, True)
    plotPaths(100, "paths_100.svg", cmap)
    plotPaths(100, "paths_100_log.svg", cmap, True)

    plotPaths(10_000, "paths_10_000_rev.png", None, True, True)
    plotPaths(100, "paths_100_rev.svg", None, True, True)

    plotMaxes(10_000, "maxes_10_000.svg", cmap)
    plotPathLengths(10_000, "path_lengths_10_000.svg", cmap)

